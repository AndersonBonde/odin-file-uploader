# Steps to setup a new project:

# Tips:

> Copy package.json from an old project and run npm install
> Copy webpack.config.js from old project
> https://webpack.js.org/guides/getting-started/
> npx webpack --watch 

# Basic setup:

> npm init --yes
> npm install webpack webpack-cli --save-dev
> Create /src & /dist directories
> Move index.html to /dist & index.js to /src
> Inside index.html <head> add <script src="main.js" defer></script>
> npx webpack

# Using a configuration file:

> Create webpack.config.js
    
const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
};

# Loading CSS & Images:

> npm install style-loader css-loader --save-dev
> modify webpack.config.js

const path = require('path');

module.exports = {
  mode: 'development',
  entry: './src/index.js',
  devtool: 'inline-source-map',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.(png|svg|jpg|jpeg|gif)$/i,
        type: 'asset/resource',
      },
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/i,
        type: 'asset/resource',
      },
    ],
  },
};

> Add style.css to /src & import it inside index.js with (import './style.css')
> For images we add them to /src & import inside the file with (import myIcon from './icon.png')
> For Fonts & Data check: https://webpack.js.org/guides/asset-management/

# Development environment

> Add (mode: 'development',) inside webpack.config.js before (entry: {...)
> Add (devtool: 'inline-source-map',) after (entry: ...) for Source Maps (meaningful error messages)

# Font Awesome

> npm install @fortawesome/fontawesome-free --save
> Add the following to index.js:

import '@fortawesome/fontawesome-free/js/fontawesome';
import '@fortawesome/fontawesome-free/js/solid';

> To add an icon, find one you like at: fontawesome.com
 
  copy the link and add inside the index.html: <i class="fa-solid fa-house"></i>
  create a 'i' inside JS and add the correct class;

# ESLint

> npm install eslint --save-dev
> npm init @eslint/config
> To format on save, go to > Command Palette > open Preferences: Open Workspace Settings (JSON)

{
    "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
    },
    "eslint.validate": ["javascript"]
}

# Babel

> npm install -D babel-loader @babel/core @babel/preset-env webpack
> Within your webpack configuration object, you'll need to add the babel-loader to the list of modules, like so:

module: {
  rules: [
    {
      test: /\.(?:js|mjs|cjs)$/,
      exclude: /node_modules/,
      use: {
        loader: 'babel-loader',
        options: {
          presets: [
            ['@babel/preset-env', { targets: "defaults" }]
          ]
        }
      }
    }
  ]
}

# Jest

> npm install --save-dev jest
> Add the following section to your package.json:

{
  "scripts": {
    "test": "jest"
  }
}

# Jest & Babel 

> npm install --save-dev babel-jest @babel/core @babel/preset-env
> Configure Babel to target your current version of Node by creating a babel.config.js file in the root
of your project:

babel.config.js:

module.exports = {
  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],
};

# Prettier

> npm install --save-dev --save-exact prettier
> echo {}> .prettier.json
> Create a .prettierignore file (add same files as .gitignore)
> npx prettier . --write

# eslint-config-prettier

> npm install --save-dev eslint-config-prettier
> Add "prettier" to the "extends" array in your .eslintrc.* file

	{
	  "extends": [
	    "some-other-config-you-use",
	    "prettier"
	  ]
	}